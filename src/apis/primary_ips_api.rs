/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: in-sync
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{Deserialize, Serialize};

/// struct for passing parameters to the method [`assign_primary_ip_to_resource`]
#[derive(Clone, Debug, Default)]
pub struct AssignPrimaryIpToResourceParams {
    /// ID of the Primary IP.
    pub id: i64,
    pub assign_primary_ip_to_resource_request: Option<models::AssignPrimaryIpToResourceRequest>,
}

/// struct for passing parameters to the method [`change_primary_ip_protection`]
#[derive(Clone, Debug, Default)]
pub struct ChangePrimaryIpProtectionParams {
    /// ID of the Primary IP.
    pub id: i64,
    pub body: Option<models::Protection>,
}

/// struct for passing parameters to the method [`change_reverse_dns_records_for_primary_ip`]
#[derive(Clone, Debug, Default)]
pub struct ChangeReverseDnsRecordsForPrimaryIpParams {
    /// ID of the Primary IP.
    pub id: i64,
    /// The `ip` attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the `/64` subnet of the [Primary IP](#primary-ips).  The `dns_ptr` attribute specifies the hostname used for the IP address.  For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.
    pub body: Option<models::DnsPtr>,
}

/// struct for passing parameters to the method [`create_primary_ip`]
#[derive(Clone, Debug, Default)]
pub struct CreatePrimaryIpParams {
    /// Request Body for creating a new [Primary IP](#primary-ips).  The `datacenter` and `assignee_id`/`assignee_type` attributes are mutually exclusive.
    pub create_primary_ip_request: Option<models::CreatePrimaryIpRequest>,
}

/// struct for passing parameters to the method [`delete_primary_ip`]
#[derive(Clone, Debug, Default)]
pub struct DeletePrimaryIpParams {
    /// ID of the Primary IP.
    pub id: i64,
}

/// struct for passing parameters to the method [`get_primary_ip`]
#[derive(Clone, Debug, Default)]
pub struct GetPrimaryIpParams {
    /// ID of the Primary IP.
    pub id: i64,
}

/// struct for passing parameters to the method [`get_primary_ip_action`]
#[derive(Clone, Debug, Default)]
pub struct GetPrimaryIpActionParams {
    /// ID of the Action
    pub id: i64,
}

/// struct for passing parameters to the method [`list_primary_ip_actions`]
#[derive(Clone, Debug, Default)]
pub struct ListPrimaryIpActionsParams {
    /// Filter the actions by ID. Can be used multiple times. The response will only contain actions matching the specified IDs.
    pub id: Option<Vec<i64>>,
    /// Sort actions by field and direction. Can be used multiple times. For more information, see \"[Sorting](#sorting)\".
    pub sort: Option<Vec<String>>,
    /// Filter the actions by status. Can be used multiple times. The response will only contain actions matching the specified statuses.
    pub status: Option<Vec<String>>,
    /// Page number to return. For more information, see \"[Pagination](#pagination)\".
    pub page: Option<i64>,
    /// Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".
    pub per_page: Option<i64>,
}

/// struct for passing parameters to the method [`list_primary_ips`]
#[derive(Clone, Debug, Default)]
pub struct ListPrimaryIpsParams {
    /// Filter resources by their name. The response will only contain the resources matching exactly the specified name.
    pub name: Option<String>,
    /// Filter resources by labels. The response will only contain resources matching the label selector. For more information, see \"[Label Selector](#label-selector)\".
    pub label_selector: Option<String>,
    /// Filter results by IP address.
    pub ip: Option<String>,
    /// Page number to return. For more information, see \"[Pagination](#pagination)\".
    pub page: Option<i64>,
    /// Maximum number of entries returned per page. For more information, see \"[Pagination](#pagination)\".
    pub per_page: Option<i64>,
    /// Sort resources by field and direction. Can be used multiple times. For more information, see \"[Sorting](#sorting)\".
    pub sort: Option<Vec<String>>,
}

/// struct for passing parameters to the method [`replace_primary_ip`]
#[derive(Clone, Debug, Default)]
pub struct ReplacePrimaryIpParams {
    /// ID of the Primary IP.
    pub id: i64,
    pub replace_primary_ip_request: Option<models::ReplacePrimaryIpRequest>,
}

/// struct for passing parameters to the method [`unassign_primary_ip_from_resource`]
#[derive(Clone, Debug, Default)]
pub struct UnassignPrimaryIpFromResourceParams {
    /// ID of the Primary IP.
    pub id: i64,
}

/// struct for typed errors of method [`assign_primary_ip_to_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AssignPrimaryIpToResourceError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`change_primary_ip_protection`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangePrimaryIpProtectionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`change_reverse_dns_records_for_primary_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeReverseDnsRecordsForPrimaryIpError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_primary_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePrimaryIpError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete_primary_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeletePrimaryIpError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_primary_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPrimaryIpError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_primary_ip_action`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPrimaryIpActionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_primary_ip_actions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPrimaryIpActionsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_primary_ips`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListPrimaryIpsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`replace_primary_ip`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplacePrimaryIpError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`unassign_primary_ip_from_resource`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UnassignPrimaryIpFromResourceError {
    UnknownValue(serde_json::Value),
}

/// Assign a [Primary IP](#primary-ips) to a resource.  A [Server](#servers) can only have one [Primary IP](#primary-ips) of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use [Floating IPs](#floating-ips).  A [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.  #### Error Codes specific to this Call  | Code                          | Description                                                                      | |------------------------------ |--------------------------------------------------------------------------------- | | `server_not_stopped`          | The [Server](#servers) is running, but needs to be powered off                   | | `primary_ip_already_assigned` | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) | | `server_has_ipv4`             | The [Server](#servers) already has an IPv4 address                               | | `server_has_ipv6`             | The [Server](#servers) already has an IPv6 address                               |
pub async fn assign_primary_ip_to_resource(
    configuration: &configuration::Configuration,
    params: AssignPrimaryIpToResourceParams,
) -> Result<models::AssignPrimaryIpToResourceResponse, Error<AssignPrimaryIpToResourceError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let assign_primary_ip_to_resource_request = params.assign_primary_ip_to_resource_request;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!(
        "{}/primary_ips/{id}/actions/assign",
        local_base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&assign_primary_ip_to_resource_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AssignPrimaryIpToResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Changes the protection configuration of a [Primary IP](#primary-ips).  A [Primary IPs](#primary-ips) deletion protection can only be enabled if its `auto_delete` property is set to `false`.
pub async fn change_primary_ip_protection(
    configuration: &configuration::Configuration,
    params: ChangePrimaryIpProtectionParams,
) -> Result<models::ChangePrimaryIpProtectionResponse, Error<ChangePrimaryIpProtectionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!(
        "{}/primary_ips/{id}/actions/change_protection",
        local_base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChangePrimaryIpProtectionError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Change the reverse DNS records for this [Primary IP](#primary-ips).  Allows to modify the PTR records set for the IP address.
pub async fn change_reverse_dns_records_for_primary_ip(
    configuration: &configuration::Configuration,
    params: ChangeReverseDnsRecordsForPrimaryIpParams,
) -> Result<
    models::ChangeReverseDnsRecordsForPrimaryIpResponse,
    Error<ChangeReverseDnsRecordsForPrimaryIpError>,
> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!(
        "{}/primary_ips/{id}/actions/change_dns_ptr",
        local_base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChangeReverseDnsRecordsForPrimaryIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new [Primary IP](#primary-ips).  Can optionally be assigned to a resource by providing an `assignee_id` and `assignee_type`.  If not assigned to a resource the `datacenter` key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.  A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.  #### Call specific error codes  | Code                          | Description                                                              | |------------------------------ |------------------------------------------------------------------------- | | `server_not_stopped`          | The specified [Server](#servers) is running, but needs to be powered off | | `server_has_ipv4`             | The [Server](#servers) already has an ipv4 address                       | | `server_has_ipv6`             | The [Server](#servers) already has an ipv6 address                       |
pub async fn create_primary_ip(
    configuration: &configuration::Configuration,
    params: CreatePrimaryIpParams,
) -> Result<models::CreatePrimaryIpResponse, Error<CreatePrimaryIpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_primary_ip_request = params.create_primary_ip_request;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips", local_base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_primary_ip_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreatePrimaryIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a [Primary IP](#primary-ips).  If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.
pub async fn delete_primary_ip(
    configuration: &configuration::Configuration,
    params: DeletePrimaryIpParams,
) -> Result<(), Error<DeletePrimaryIpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips/{id}", local_base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeletePrimaryIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a [Primary IP](#primary-ips).
pub async fn get_primary_ip(
    configuration: &configuration::Configuration,
    params: GetPrimaryIpParams,
) -> Result<models::GetPrimaryIpResponse, Error<GetPrimaryIpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips/{id}", local_base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPrimaryIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a single [Action](#actions).
pub async fn get_primary_ip_action(
    configuration: &configuration::Configuration,
    params: GetPrimaryIpActionParams,
) -> Result<models::GetActionResponse, Error<GetPrimaryIpActionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips/actions/{id}", local_base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPrimaryIpActionError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists multiple [Actions](#actions).  Use the provided URI parameters to modify the result.
pub async fn list_primary_ip_actions(
    configuration: &configuration::Configuration,
    params: ListPrimaryIpActionsParams,
) -> Result<models::ListActionsResponse, Error<ListPrimaryIpActionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let sort = params.sort;
    let status = params.status;
    let page = params.page;
    let per_page = params.per_page;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips/actions", local_base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(
                &local_var_str
                    .iter()
                    .map(|p| ("id".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => local_var_req_builder.query(&[(
                "id",
                &local_var_str
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(
                &local_var_str
                    .iter()
                    .map(|p| ("sort".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => local_var_req_builder.query(&[(
                "sort",
                &local_var_str
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(
                &local_var_str
                    .iter()
                    .map(|p| ("status".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => local_var_req_builder.query(&[(
                "status",
                &local_var_str
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPrimaryIpActionsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List multiple [Primary IPs](#primary-ips).  Use the provided URI parameters to modify the result.
pub async fn list_primary_ips(
    configuration: &configuration::Configuration,
    params: ListPrimaryIpsParams,
) -> Result<models::ListPrimaryIpsResponse, Error<ListPrimaryIpsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let label_selector = params.label_selector;
    let ip = params.ip;
    let page = params.page;
    let per_page = params.per_page;
    let sort = params.sort;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips", local_base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label_selector {
        local_var_req_builder =
            local_var_req_builder.query(&[("label_selector", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ip {
        local_var_req_builder = local_var_req_builder.query(&[("ip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder =
            local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = per_page {
        local_var_req_builder =
            local_var_req_builder.query(&[("per_page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = match "multi" {
            "multi" => local_var_req_builder.query(
                &local_var_str
                    .iter()
                    .map(|p| ("sort".to_owned(), p.to_string()))
                    .collect::<Vec<(std::string::String, std::string::String)>>(),
            ),
            _ => local_var_req_builder.query(&[(
                "sort",
                &local_var_str
                    .iter()
                    .map(|p| p.to_string())
                    .collect::<Vec<String>>()
                    .join(",")
                    .to_string(),
            )]),
        };
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListPrimaryIpsError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update a [Primary IP](#primary-ips).  If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code `conflict` will be returned.
pub async fn replace_primary_ip(
    configuration: &configuration::Configuration,
    params: ReplacePrimaryIpParams,
) -> Result<models::ReplacePrimaryIpResponse, Error<ReplacePrimaryIpError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let replace_primary_ip_request = params.replace_primary_ip_request;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!("{}/primary_ips/{id}", local_base_path, id = id);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&replace_primary_ip_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ReplacePrimaryIpError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Unassign a [Primary IP](#primary-ips) from a resource.  A [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.  A [Server](#server) requires at least one network interface (public or private) to be powered on.  #### Error Codes specific to this Call  | Code                              | Description                                                   | |---------------------------------- |-------------------------------------------------------------- | | `server_not_stopped`              | The [Server](#server) is running, but needs to be powered off | | `server_is_load_balancer_target`  | The [Server](#server) IPv4 address is a loadbalancer target   |
pub async fn unassign_primary_ip_from_resource(
    configuration: &configuration::Configuration,
    params: UnassignPrimaryIpFromResourceParams,
) -> Result<models::UnassignPrimaryIpFromResourceResponse, Error<UnassignPrimaryIpFromResourceError>>
{
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_base_path = local_var_configuration.get_base_path("https://api.hetzner.cloud/v1");
    let local_var_uri_str = format!(
        "{}/primary_ips/{id}/actions/unassign",
        local_base_path,
        id = id
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UnassignPrimaryIpFromResourceError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
