/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct SshKeysApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl SshKeysApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> SshKeysApiClient {
        SshKeysApiClient {
            configuration,
        }
    }
}

pub trait SshKeysApi {
    fn create_ssh_key(&self, create_ssh_key_request: Option<crate::models::CreateSshKeyRequest>) -> Result<crate::models::CreateSshKeyResponse, Error>;
    fn delete_ssh_key(&self, id: &str) -> Result<(), Error>;
    fn get_ssh_key(&self, id: &str) -> Result<crate::models::GetSshKeyResponse, Error>;
    fn list_ssh_keys(&self, sort: Option<&str>, name: Option<&str>, fingerprint: Option<&str>, label_selector: Option<&str>) -> Result<crate::models::ListSshKeysResponse, Error>;
    fn replace_ssh_key(&self, id: &str, replace_ssh_key_request: Option<crate::models::ReplaceSshKeyRequest>) -> Result<crate::models::ReplaceSshKeyResponse, Error>;
}

impl SshKeysApi for SshKeysApiClient {
    fn create_ssh_key(&self, create_ssh_key_request: Option<crate::models::CreateSshKeyRequest>) -> Result<crate::models::CreateSshKeyResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_ssh_key_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_ssh_key(&self, id: &str) -> Result<(), Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        client.execute(req)?.error_for_status()?;
        Ok(())
    }

    fn get_ssh_key(&self, id: &str) -> Result<crate::models::GetSshKeyResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_ssh_keys(&self, sort: Option<&str>, name: Option<&str>, fingerprint: Option<&str>, label_selector: Option<&str>) -> Result<crate::models::ListSshKeysResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = fingerprint {
            req_builder = req_builder.query(&[("fingerprint", &s.to_string())]);
        }
        if let Some(ref s) = label_selector {
            req_builder = req_builder.query(&[("label_selector", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_ssh_key(&self, id: &str, replace_ssh_key_request: Option<crate::models::ReplaceSshKeyRequest>) -> Result<crate::models::ReplaceSshKeyResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&replace_ssh_key_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
