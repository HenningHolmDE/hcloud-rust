/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;
use std::borrow::Borrow;
use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

pub struct SshKeysApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl SshKeysApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> SshKeysApiClient {
        SshKeysApiClient {
            configuration,
        }
    }
}

/// struct for passing parameters to the method `create_ssh_key`
#[derive(Clone, Debug, Default)]
pub struct CreateSshKeyParams {
    pub create_ssh_key_request: Option<crate::models::CreateSshKeyRequest>
}

/// struct for passing parameters to the method `delete_ssh_key`
#[derive(Clone, Debug, Default)]
pub struct DeleteSshKeyParams {
    /// ID of the SSH key
    pub id: String
}

/// struct for passing parameters to the method `get_ssh_key`
#[derive(Clone, Debug, Default)]
pub struct GetSshKeyParams {
    /// ID of the SSH key
    pub id: String
}

/// struct for passing parameters to the method `list_ssh_keys`
#[derive(Clone, Debug, Default)]
pub struct ListSshKeysParams {
    /// Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc
    pub sort: Option<String>,
    /// Can be used to filter SSH keys by their name. The response will only contain the SSH key matching the specified name.
    pub name: Option<String>,
    /// Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint.
    pub fingerprint: Option<String>,
    /// Can be used to filter SSH keys by labels. The response will only contain SSH keys matching the label selector.
    pub label_selector: Option<String>
}

/// struct for passing parameters to the method `replace_ssh_key`
#[derive(Clone, Debug, Default)]
pub struct ReplaceSshKeyParams {
    /// ID of the SSH key
    pub id: String,
    pub replace_ssh_key_request: Option<crate::models::ReplaceSshKeyRequest>
}


/// struct for typed errors of method `create_ssh_key`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSshKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_ssh_key`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteSshKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_ssh_key`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSshKeyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_ssh_keys`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListSshKeysError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_ssh_key`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceSshKeyError {
    UnknownValue(serde_json::Value),
}


pub trait SshKeysApi {
    fn create_ssh_key(&self, params: CreateSshKeyParams) -> Result<crate::models::CreateSshKeyResponse, Error<CreateSshKeyError>>;
    fn delete_ssh_key(&self, params: DeleteSshKeyParams) -> Result<(), Error<DeleteSshKeyError>>;
    fn get_ssh_key(&self, params: GetSshKeyParams) -> Result<crate::models::GetSshKeyResponse, Error<GetSshKeyError>>;
    fn list_ssh_keys(&self, params: ListSshKeysParams) -> Result<crate::models::ListSshKeysResponse, Error<ListSshKeysError>>;
    fn replace_ssh_key(&self, params: ReplaceSshKeyParams) -> Result<crate::models::ReplaceSshKeyResponse, Error<ReplaceSshKeyError>>;
}

impl SshKeysApi for SshKeysApiClient {
    fn create_ssh_key(&self, params: CreateSshKeyParams) -> Result<crate::models::CreateSshKeyResponse, Error<CreateSshKeyError>> {
        // unbox the parameters
        let create_ssh_key_request = params.create_ssh_key_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_ssh_key_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CreateSshKeyError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn delete_ssh_key(&self, params: DeleteSshKeyParams) -> Result<(), Error<DeleteSshKeyError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            Ok(())
        } else {
            let entity: Option<DeleteSshKeyError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn get_ssh_key(&self, params: GetSshKeyParams) -> Result<crate::models::GetSshKeyResponse, Error<GetSshKeyError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<GetSshKeyError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn list_ssh_keys(&self, params: ListSshKeysParams) -> Result<crate::models::ListSshKeysResponse, Error<ListSshKeysError>> {
        // unbox the parameters
        let sort = params.sort;
        let name = params.name;
        let fingerprint = params.fingerprint;
        let label_selector = params.label_selector;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = fingerprint {
            req_builder = req_builder.query(&[("fingerprint", &s.to_string())]);
        }
        if let Some(ref s) = label_selector {
            req_builder = req_builder.query(&[("label_selector", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListSshKeysError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn replace_ssh_key(&self, params: ReplaceSshKeyParams) -> Result<crate::models::ReplaceSshKeyResponse, Error<ReplaceSshKeyError>> {
        // unbox the parameters
        let id = params.id;
        let replace_ssh_key_request = params.replace_ssh_key_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/ssh_keys/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&replace_ssh_key_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ReplaceSshKeyError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

}
