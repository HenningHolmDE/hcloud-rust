/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use reqwest;

use super::{Error, configuration};

pub struct ServersApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ServersApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ServersApiClient {
        ServersApiClient {
            configuration,
        }
    }
}

pub trait ServersApi {
    fn attach_iso_to_server(&self, id: &str, attach_iso_to_server_request: Option<crate::models::AttachIsoToServerRequest>) -> Result<crate::models::AttachIsoToServerResponse, Error>;
    fn attach_server_to_network(&self, id: &str, attach_server_to_network_request: Option<crate::models::AttachServerToNetworkRequest>) -> Result<crate::models::AttachServerToNetworkResponse, Error>;
    fn change_alias_ips_of_network(&self, id: &str, change_alias_ips_of_network_request: Option<crate::models::ChangeAliasIpsOfNetworkRequest>) -> Result<crate::models::ChangeAliasIpsOfNetworkResponse, Error>;
    fn change_reverse_dns_entry_for_this_server(&self, id: &str, change_reverse_dns_entry_for_this_server_request: Option<crate::models::ChangeReverseDnsEntryForThisServerRequest>) -> Result<crate::models::ChangeReverseDnsEntryForThisServerResponse, Error>;
    fn change_server_protection(&self, id: &str, change_server_protection_request: Option<crate::models::ChangeServerProtectionRequest>) -> Result<crate::models::ChangeServerProtectionResponse, Error>;
    fn change_type_of_server(&self, id: &str, change_type_of_server_request: Option<crate::models::ChangeTypeOfServerRequest>) -> Result<crate::models::ChangeTypeOfServerResponse, Error>;
    fn create_image_from_server(&self, id: &str, create_image_from_server_request: Option<crate::models::CreateImageFromServerRequest>) -> Result<crate::models::CreateImageFromServerResponse, Error>;
    fn create_server(&self, create_server_request: Option<crate::models::CreateServerRequest>) -> Result<crate::models::CreateServerResponse, Error>;
    fn delete_server(&self, id: &str) -> Result<crate::models::DeleteServerResponse, Error>;
    fn detach_iso_from_server(&self, id: &str) -> Result<crate::models::DetachIsoFromServerResponse, Error>;
    fn detach_server_from_network(&self, id: &str, detach_server_from_network_request: Option<crate::models::DetachServerFromNetworkRequest>) -> Result<crate::models::DetachServerFromNetworkResponse, Error>;
    fn disable_backups_for_server(&self, id: &str) -> Result<crate::models::DisableBackupsForServerResponse, Error>;
    fn disable_rescue_mode_for_server(&self, id: &str) -> Result<crate::models::DisableRescueModeForServerResponse, Error>;
    fn enable_and_configure_backups_for_server(&self, id: &str) -> Result<crate::models::EnableAndConfigureBackupsForServerResponse, Error>;
    fn enable_rescue_mode_for_server(&self, id: &str, enable_rescue_mode_for_server_request: Option<crate::models::EnableRescueModeForServerRequest>) -> Result<crate::models::EnableRescueModeForServerResponse, Error>;
    fn get_action_for_server(&self, id: &str, action_id: &str) -> Result<crate::models::GetActionForServerResponse, Error>;
    fn get_metrics_for_server(&self, id: &str, _type: &str, start: &str, end: &str, step: Option<&str>) -> Result<crate::models::GetMetricsForServerResponse, Error>;
    fn get_server(&self, id: &str) -> Result<crate::models::GetServerResponse, Error>;
    fn list_actions_for_server(&self, id: &str, status: Option<&str>, sort: Option<&str>) -> Result<crate::models::ListActionsForServerResponse, Error>;
    fn list_servers(&self, status: Option<&str>, sort: Option<&str>, name: Option<&str>, label_selector: Option<&str>) -> Result<crate::models::ListServersResponse, Error>;
    fn power_off_server(&self, id: &str) -> Result<crate::models::PowerOffServerResponse, Error>;
    fn power_on_server(&self, id: &str) -> Result<crate::models::PowerOnServerResponse, Error>;
    fn rebuild_server_from_image(&self, id: &str, rebuild_server_from_image_request: Option<crate::models::RebuildServerFromImageRequest>) -> Result<crate::models::RebuildServerFromImageResponse, Error>;
    fn replace_server(&self, id: &str, replace_server_request: Option<crate::models::ReplaceServerRequest>) -> Result<crate::models::ReplaceServerResponse, Error>;
    fn request_console_for_server(&self, id: &str) -> Result<crate::models::RequestConsoleForServerResponse, Error>;
    fn reset_root_password_of_server(&self, id: &str) -> Result<crate::models::ResetRootPasswordOfServerResponse, Error>;
    fn reset_server(&self, id: &str) -> Result<crate::models::ResetServerResponse, Error>;
    fn shutdown_server(&self, id: &str) -> Result<crate::models::ShutdownServerResponse, Error>;
    fn soft_reboot_server(&self, id: &str) -> Result<crate::models::SoftRebootServerResponse, Error>;
}

impl ServersApi for ServersApiClient {
    fn attach_iso_to_server(&self, id: &str, attach_iso_to_server_request: Option<crate::models::AttachIsoToServerRequest>) -> Result<crate::models::AttachIsoToServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/attach_iso", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&attach_iso_to_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn attach_server_to_network(&self, id: &str, attach_server_to_network_request: Option<crate::models::AttachServerToNetworkRequest>) -> Result<crate::models::AttachServerToNetworkResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/attach_to_network", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&attach_server_to_network_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn change_alias_ips_of_network(&self, id: &str, change_alias_ips_of_network_request: Option<crate::models::ChangeAliasIpsOfNetworkRequest>) -> Result<crate::models::ChangeAliasIpsOfNetworkResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_alias_ips", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_alias_ips_of_network_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn change_reverse_dns_entry_for_this_server(&self, id: &str, change_reverse_dns_entry_for_this_server_request: Option<crate::models::ChangeReverseDnsEntryForThisServerRequest>) -> Result<crate::models::ChangeReverseDnsEntryForThisServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_dns_ptr", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_reverse_dns_entry_for_this_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn change_server_protection(&self, id: &str, change_server_protection_request: Option<crate::models::ChangeServerProtectionRequest>) -> Result<crate::models::ChangeServerProtectionResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_protection", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_server_protection_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn change_type_of_server(&self, id: &str, change_type_of_server_request: Option<crate::models::ChangeTypeOfServerRequest>) -> Result<crate::models::ChangeTypeOfServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_type", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_type_of_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_image_from_server(&self, id: &str, create_image_from_server_request: Option<crate::models::CreateImageFromServerRequest>) -> Result<crate::models::CreateImageFromServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/create_image", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_image_from_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn create_server(&self, create_server_request: Option<crate::models::CreateServerRequest>) -> Result<crate::models::CreateServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn delete_server(&self, id: &str) -> Result<crate::models::DeleteServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn detach_iso_from_server(&self, id: &str) -> Result<crate::models::DetachIsoFromServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/detach_iso", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn detach_server_from_network(&self, id: &str, detach_server_from_network_request: Option<crate::models::DetachServerFromNetworkRequest>) -> Result<crate::models::DetachServerFromNetworkResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/detach_from_network", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&detach_server_from_network_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn disable_backups_for_server(&self, id: &str) -> Result<crate::models::DisableBackupsForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/disable_backup", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn disable_rescue_mode_for_server(&self, id: &str) -> Result<crate::models::DisableRescueModeForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/disable_rescue", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn enable_and_configure_backups_for_server(&self, id: &str) -> Result<crate::models::EnableAndConfigureBackupsForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/enable_backup", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn enable_rescue_mode_for_server(&self, id: &str, enable_rescue_mode_for_server_request: Option<crate::models::EnableRescueModeForServerRequest>) -> Result<crate::models::EnableRescueModeForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/enable_rescue", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&enable_rescue_mode_for_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_action_for_server(&self, id: &str, action_id: &str) -> Result<crate::models::GetActionForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/{action_id}", configuration.base_path, id=crate::apis::urlencode(id), action_id=crate::apis::urlencode(action_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_metrics_for_server(&self, id: &str, _type: &str, start: &str, end: &str, step: Option<&str>) -> Result<crate::models::GetMetricsForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/metrics", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("type", &_type.to_string())]);
        req_builder = req_builder.query(&[("start", &start.to_string())]);
        req_builder = req_builder.query(&[("end", &end.to_string())]);
        if let Some(ref s) = step {
            req_builder = req_builder.query(&[("step", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn get_server(&self, id: &str) -> Result<crate::models::GetServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_actions_for_server(&self, id: &str, status: Option<&str>, sort: Option<&str>) -> Result<crate::models::ListActionsForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn list_servers(&self, status: Option<&str>, sort: Option<&str>, name: Option<&str>, label_selector: Option<&str>) -> Result<crate::models::ListServersResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = label_selector {
            req_builder = req_builder.query(&[("label_selector", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn power_off_server(&self, id: &str) -> Result<crate::models::PowerOffServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/poweroff", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn power_on_server(&self, id: &str) -> Result<crate::models::PowerOnServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/poweron", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn rebuild_server_from_image(&self, id: &str, rebuild_server_from_image_request: Option<crate::models::RebuildServerFromImageRequest>) -> Result<crate::models::RebuildServerFromImageResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/rebuild", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&rebuild_server_from_image_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn replace_server(&self, id: &str, replace_server_request: Option<crate::models::ReplaceServerRequest>) -> Result<crate::models::ReplaceServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&replace_server_request);

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn request_console_for_server(&self, id: &str) -> Result<crate::models::RequestConsoleForServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/request_console", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn reset_root_password_of_server(&self, id: &str) -> Result<crate::models::ResetRootPasswordOfServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reset_password", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn reset_server(&self, id: &str) -> Result<crate::models::ResetServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reset", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn shutdown_server(&self, id: &str) -> Result<crate::models::ShutdownServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/shutdown", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

    fn soft_reboot_server(&self, id: &str) -> Result<crate::models::SoftRebootServerResponse, Error> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reboot", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        // send request
        let req = req_builder.build()?;

        Ok(client.execute(req)?.error_for_status()?.json()?)
    }

}
