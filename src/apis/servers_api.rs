/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

#[allow(unused_imports)]
use std::rc::Rc;
use std::borrow::Borrow;
use std::option::Option;

use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

pub struct ServersApiClient {
    configuration: Rc<configuration::Configuration>,
}

impl ServersApiClient {
    pub fn new(configuration: Rc<configuration::Configuration>) -> ServersApiClient {
        ServersApiClient {
            configuration,
        }
    }
}

/// struct for passing parameters to the method `attach_iso_to_server`
#[derive(Clone, Debug, Default)]
pub struct AttachIsoToServerParams {
    /// ID of the Server
    pub id: String,
    pub attach_iso_to_server_request: Option<crate::models::AttachIsoToServerRequest>
}

/// struct for passing parameters to the method `attach_server_to_network`
#[derive(Clone, Debug, Default)]
pub struct AttachServerToNetworkParams {
    /// ID of the Server
    pub id: String,
    pub attach_server_to_network_request: Option<crate::models::AttachServerToNetworkRequest>
}

/// struct for passing parameters to the method `change_alias_ips_of_network`
#[derive(Clone, Debug, Default)]
pub struct ChangeAliasIpsOfNetworkParams {
    /// ID of the Server
    pub id: String,
    pub change_alias_ips_of_network_request: Option<crate::models::ChangeAliasIpsOfNetworkRequest>
}

/// struct for passing parameters to the method `change_reverse_dns_entry_for_this_server`
#[derive(Clone, Debug, Default)]
pub struct ChangeReverseDnsEntryForThisServerParams {
    /// ID of the Server
    pub id: String,
    pub change_reverse_dns_entry_for_this_server_request: Option<crate::models::ChangeReverseDnsEntryForThisServerRequest>
}

/// struct for passing parameters to the method `change_server_protection`
#[derive(Clone, Debug, Default)]
pub struct ChangeServerProtectionParams {
    /// ID of the Server
    pub id: String,
    pub change_server_protection_request: Option<crate::models::ChangeServerProtectionRequest>
}

/// struct for passing parameters to the method `change_type_of_server`
#[derive(Clone, Debug, Default)]
pub struct ChangeTypeOfServerParams {
    /// ID of the Server
    pub id: String,
    pub change_type_of_server_request: Option<crate::models::ChangeTypeOfServerRequest>
}

/// struct for passing parameters to the method `create_image_from_server`
#[derive(Clone, Debug, Default)]
pub struct CreateImageFromServerParams {
    /// ID of the Server
    pub id: String,
    pub create_image_from_server_request: Option<crate::models::CreateImageFromServerRequest>
}

/// struct for passing parameters to the method `create_server`
#[derive(Clone, Debug, Default)]
pub struct CreateServerParams {
    pub create_server_request: Option<crate::models::CreateServerRequest>
}

/// struct for passing parameters to the method `delete_server`
#[derive(Clone, Debug, Default)]
pub struct DeleteServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `detach_iso_from_server`
#[derive(Clone, Debug, Default)]
pub struct DetachIsoFromServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `detach_server_from_network`
#[derive(Clone, Debug, Default)]
pub struct DetachServerFromNetworkParams {
    /// ID of the Server
    pub id: String,
    pub detach_server_from_network_request: Option<crate::models::DetachServerFromNetworkRequest>
}

/// struct for passing parameters to the method `disable_backups_for_server`
#[derive(Clone, Debug, Default)]
pub struct DisableBackupsForServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `disable_rescue_mode_for_server`
#[derive(Clone, Debug, Default)]
pub struct DisableRescueModeForServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `enable_and_configure_backups_for_server`
#[derive(Clone, Debug, Default)]
pub struct EnableAndConfigureBackupsForServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `enable_rescue_mode_for_server`
#[derive(Clone, Debug, Default)]
pub struct EnableRescueModeForServerParams {
    /// ID of the Server
    pub id: String,
    pub enable_rescue_mode_for_server_request: Option<crate::models::EnableRescueModeForServerRequest>
}

/// struct for passing parameters to the method `get_action_for_server`
#[derive(Clone, Debug, Default)]
pub struct GetActionForServerParams {
    /// ID of the Server
    pub id: String,
    /// ID of the Action
    pub action_id: String
}

/// struct for passing parameters to the method `get_metrics_for_server`
#[derive(Clone, Debug, Default)]
pub struct GetMetricsForServerParams {
    /// ID of the Server
    pub id: String,
    /// Type of metrics to get cpu disk network
    pub _type: String,
    /// Start of period to get Metrics for (in ISO-8601 format)
    pub start: String,
    /// End of period to get Metrics for (in ISO-8601 format)
    pub end: String,
    /// Resolution of results in seconds
    pub step: Option<String>
}

/// struct for passing parameters to the method `get_server`
#[derive(Clone, Debug, Default)]
pub struct GetServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `list_actions_for_server`
#[derive(Clone, Debug, Default)]
pub struct ListActionsForServerParams {
    /// ID of the Server
    pub id: String,
    /// Can be used multiple times, the response will contain only Actions with specified statuses Choices: running success error
    pub status: Option<String>,
    /// Can be used multiple times Choices: id id:asc id:desc command command:asc command:desc status status:asc status:desc progress progress:asc progress:desc started started:asc started:desc finished finished:asc finished:desc
    pub sort: Option<String>
}

/// struct for passing parameters to the method `list_servers`
#[derive(Clone, Debug, Default)]
pub struct ListServersParams {
    /// Can be used multiple times. The response will only contain Server matching the status. Choices: initializing starting running stopping off deleting rebuilding migrating unknown
    pub status: Option<String>,
    /// Can be used multiple times. Choices: id id:asc id:desc name name:asc name:desc created created:asc created:desc
    pub sort: Option<String>,
    /// Can be used to filter Servers by their name. The response will only contain the Server matching the specified name.
    pub name: Option<String>,
    /// Can be used to filter Servers by labels. The response will only contain Servers matching the label selector.
    pub label_selector: Option<String>
}

/// struct for passing parameters to the method `power_off_server`
#[derive(Clone, Debug, Default)]
pub struct PowerOffServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `power_on_server`
#[derive(Clone, Debug, Default)]
pub struct PowerOnServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `rebuild_server_from_image`
#[derive(Clone, Debug, Default)]
pub struct RebuildServerFromImageParams {
    /// ID of the Server
    pub id: String,
    pub rebuild_server_from_image_request: Option<crate::models::RebuildServerFromImageRequest>
}

/// struct for passing parameters to the method `replace_server`
#[derive(Clone, Debug, Default)]
pub struct ReplaceServerParams {
    /// ID of the Server
    pub id: String,
    pub replace_server_request: Option<crate::models::ReplaceServerRequest>
}

/// struct for passing parameters to the method `request_console_for_server`
#[derive(Clone, Debug, Default)]
pub struct RequestConsoleForServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `reset_root_password_of_server`
#[derive(Clone, Debug, Default)]
pub struct ResetRootPasswordOfServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `reset_server`
#[derive(Clone, Debug, Default)]
pub struct ResetServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `shutdown_server`
#[derive(Clone, Debug, Default)]
pub struct ShutdownServerParams {
    /// ID of the Server
    pub id: String
}

/// struct for passing parameters to the method `soft_reboot_server`
#[derive(Clone, Debug, Default)]
pub struct SoftRebootServerParams {
    /// ID of the Server
    pub id: String
}


/// struct for typed errors of method `attach_iso_to_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachIsoToServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `attach_server_to_network`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AttachServerToNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `change_alias_ips_of_network`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeAliasIpsOfNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `change_reverse_dns_entry_for_this_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeReverseDnsEntryForThisServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `change_server_protection`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeServerProtectionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `change_type_of_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChangeTypeOfServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_image_from_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateImageFromServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `create_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `detach_iso_from_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachIsoFromServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `detach_server_from_network`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DetachServerFromNetworkError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `disable_backups_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DisableBackupsForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `disable_rescue_mode_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DisableRescueModeForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `enable_and_configure_backups_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EnableAndConfigureBackupsForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `enable_rescue_mode_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EnableRescueModeForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_action_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetActionForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_metrics_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMetricsForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_actions_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListActionsForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `list_servers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListServersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `power_off_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PowerOffServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `power_on_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PowerOnServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `rebuild_server_from_image`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RebuildServerFromImageError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `replace_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `request_console_for_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RequestConsoleForServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `reset_root_password_of_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetRootPasswordOfServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `reset_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ResetServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `shutdown_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ShutdownServerError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `soft_reboot_server`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SoftRebootServerError {
    UnknownValue(serde_json::Value),
}


pub trait ServersApi {
    fn attach_iso_to_server(&self, params: AttachIsoToServerParams) -> Result<crate::models::AttachIsoToServerResponse, Error<AttachIsoToServerError>>;
    fn attach_server_to_network(&self, params: AttachServerToNetworkParams) -> Result<crate::models::AttachServerToNetworkResponse, Error<AttachServerToNetworkError>>;
    fn change_alias_ips_of_network(&self, params: ChangeAliasIpsOfNetworkParams) -> Result<crate::models::ChangeAliasIpsOfNetworkResponse, Error<ChangeAliasIpsOfNetworkError>>;
    fn change_reverse_dns_entry_for_this_server(&self, params: ChangeReverseDnsEntryForThisServerParams) -> Result<crate::models::ChangeReverseDnsEntryForThisServerResponse, Error<ChangeReverseDnsEntryForThisServerError>>;
    fn change_server_protection(&self, params: ChangeServerProtectionParams) -> Result<crate::models::ChangeServerProtectionResponse, Error<ChangeServerProtectionError>>;
    fn change_type_of_server(&self, params: ChangeTypeOfServerParams) -> Result<crate::models::ChangeTypeOfServerResponse, Error<ChangeTypeOfServerError>>;
    fn create_image_from_server(&self, params: CreateImageFromServerParams) -> Result<crate::models::CreateImageFromServerResponse, Error<CreateImageFromServerError>>;
    fn create_server(&self, params: CreateServerParams) -> Result<crate::models::CreateServerResponse, Error<CreateServerError>>;
    fn delete_server(&self, params: DeleteServerParams) -> Result<crate::models::DeleteServerResponse, Error<DeleteServerError>>;
    fn detach_iso_from_server(&self, params: DetachIsoFromServerParams) -> Result<crate::models::DetachIsoFromServerResponse, Error<DetachIsoFromServerError>>;
    fn detach_server_from_network(&self, params: DetachServerFromNetworkParams) -> Result<crate::models::DetachServerFromNetworkResponse, Error<DetachServerFromNetworkError>>;
    fn disable_backups_for_server(&self, params: DisableBackupsForServerParams) -> Result<crate::models::DisableBackupsForServerResponse, Error<DisableBackupsForServerError>>;
    fn disable_rescue_mode_for_server(&self, params: DisableRescueModeForServerParams) -> Result<crate::models::DisableRescueModeForServerResponse, Error<DisableRescueModeForServerError>>;
    fn enable_and_configure_backups_for_server(&self, params: EnableAndConfigureBackupsForServerParams) -> Result<crate::models::EnableAndConfigureBackupsForServerResponse, Error<EnableAndConfigureBackupsForServerError>>;
    fn enable_rescue_mode_for_server(&self, params: EnableRescueModeForServerParams) -> Result<crate::models::EnableRescueModeForServerResponse, Error<EnableRescueModeForServerError>>;
    fn get_action_for_server(&self, params: GetActionForServerParams) -> Result<crate::models::GetActionForServerResponse, Error<GetActionForServerError>>;
    fn get_metrics_for_server(&self, params: GetMetricsForServerParams) -> Result<crate::models::GetMetricsForServerResponse, Error<GetMetricsForServerError>>;
    fn get_server(&self, params: GetServerParams) -> Result<crate::models::GetServerResponse, Error<GetServerError>>;
    fn list_actions_for_server(&self, params: ListActionsForServerParams) -> Result<crate::models::ListActionsForServerResponse, Error<ListActionsForServerError>>;
    fn list_servers(&self, params: ListServersParams) -> Result<crate::models::ListServersResponse, Error<ListServersError>>;
    fn power_off_server(&self, params: PowerOffServerParams) -> Result<crate::models::PowerOffServerResponse, Error<PowerOffServerError>>;
    fn power_on_server(&self, params: PowerOnServerParams) -> Result<crate::models::PowerOnServerResponse, Error<PowerOnServerError>>;
    fn rebuild_server_from_image(&self, params: RebuildServerFromImageParams) -> Result<crate::models::RebuildServerFromImageResponse, Error<RebuildServerFromImageError>>;
    fn replace_server(&self, params: ReplaceServerParams) -> Result<crate::models::ReplaceServerResponse, Error<ReplaceServerError>>;
    fn request_console_for_server(&self, params: RequestConsoleForServerParams) -> Result<crate::models::RequestConsoleForServerResponse, Error<RequestConsoleForServerError>>;
    fn reset_root_password_of_server(&self, params: ResetRootPasswordOfServerParams) -> Result<crate::models::ResetRootPasswordOfServerResponse, Error<ResetRootPasswordOfServerError>>;
    fn reset_server(&self, params: ResetServerParams) -> Result<crate::models::ResetServerResponse, Error<ResetServerError>>;
    fn shutdown_server(&self, params: ShutdownServerParams) -> Result<crate::models::ShutdownServerResponse, Error<ShutdownServerError>>;
    fn soft_reboot_server(&self, params: SoftRebootServerParams) -> Result<crate::models::SoftRebootServerResponse, Error<SoftRebootServerError>>;
}

impl ServersApi for ServersApiClient {
    fn attach_iso_to_server(&self, params: AttachIsoToServerParams) -> Result<crate::models::AttachIsoToServerResponse, Error<AttachIsoToServerError>> {
        // unbox the parameters
        let id = params.id;
        let attach_iso_to_server_request = params.attach_iso_to_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/attach_iso", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&attach_iso_to_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<AttachIsoToServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn attach_server_to_network(&self, params: AttachServerToNetworkParams) -> Result<crate::models::AttachServerToNetworkResponse, Error<AttachServerToNetworkError>> {
        // unbox the parameters
        let id = params.id;
        let attach_server_to_network_request = params.attach_server_to_network_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/attach_to_network", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&attach_server_to_network_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<AttachServerToNetworkError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn change_alias_ips_of_network(&self, params: ChangeAliasIpsOfNetworkParams) -> Result<crate::models::ChangeAliasIpsOfNetworkResponse, Error<ChangeAliasIpsOfNetworkError>> {
        // unbox the parameters
        let id = params.id;
        let change_alias_ips_of_network_request = params.change_alias_ips_of_network_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_alias_ips", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_alias_ips_of_network_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ChangeAliasIpsOfNetworkError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn change_reverse_dns_entry_for_this_server(&self, params: ChangeReverseDnsEntryForThisServerParams) -> Result<crate::models::ChangeReverseDnsEntryForThisServerResponse, Error<ChangeReverseDnsEntryForThisServerError>> {
        // unbox the parameters
        let id = params.id;
        let change_reverse_dns_entry_for_this_server_request = params.change_reverse_dns_entry_for_this_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_dns_ptr", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_reverse_dns_entry_for_this_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ChangeReverseDnsEntryForThisServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn change_server_protection(&self, params: ChangeServerProtectionParams) -> Result<crate::models::ChangeServerProtectionResponse, Error<ChangeServerProtectionError>> {
        // unbox the parameters
        let id = params.id;
        let change_server_protection_request = params.change_server_protection_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_protection", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_server_protection_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ChangeServerProtectionError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn change_type_of_server(&self, params: ChangeTypeOfServerParams) -> Result<crate::models::ChangeTypeOfServerResponse, Error<ChangeTypeOfServerError>> {
        // unbox the parameters
        let id = params.id;
        let change_type_of_server_request = params.change_type_of_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/change_type", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&change_type_of_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ChangeTypeOfServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn create_image_from_server(&self, params: CreateImageFromServerParams) -> Result<crate::models::CreateImageFromServerResponse, Error<CreateImageFromServerError>> {
        // unbox the parameters
        let id = params.id;
        let create_image_from_server_request = params.create_image_from_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/create_image", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_image_from_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CreateImageFromServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn create_server(&self, params: CreateServerParams) -> Result<crate::models::CreateServerResponse, Error<CreateServerError>> {
        // unbox the parameters
        let create_server_request = params.create_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&create_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<CreateServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn delete_server(&self, params: DeleteServerParams) -> Result<crate::models::DeleteServerResponse, Error<DeleteServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DeleteServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn detach_iso_from_server(&self, params: DetachIsoFromServerParams) -> Result<crate::models::DetachIsoFromServerResponse, Error<DetachIsoFromServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/detach_iso", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DetachIsoFromServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn detach_server_from_network(&self, params: DetachServerFromNetworkParams) -> Result<crate::models::DetachServerFromNetworkResponse, Error<DetachServerFromNetworkError>> {
        // unbox the parameters
        let id = params.id;
        let detach_server_from_network_request = params.detach_server_from_network_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/detach_from_network", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&detach_server_from_network_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DetachServerFromNetworkError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn disable_backups_for_server(&self, params: DisableBackupsForServerParams) -> Result<crate::models::DisableBackupsForServerResponse, Error<DisableBackupsForServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/disable_backup", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DisableBackupsForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn disable_rescue_mode_for_server(&self, params: DisableRescueModeForServerParams) -> Result<crate::models::DisableRescueModeForServerResponse, Error<DisableRescueModeForServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/disable_rescue", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<DisableRescueModeForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn enable_and_configure_backups_for_server(&self, params: EnableAndConfigureBackupsForServerParams) -> Result<crate::models::EnableAndConfigureBackupsForServerResponse, Error<EnableAndConfigureBackupsForServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/enable_backup", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<EnableAndConfigureBackupsForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn enable_rescue_mode_for_server(&self, params: EnableRescueModeForServerParams) -> Result<crate::models::EnableRescueModeForServerResponse, Error<EnableRescueModeForServerError>> {
        // unbox the parameters
        let id = params.id;
        let enable_rescue_mode_for_server_request = params.enable_rescue_mode_for_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/enable_rescue", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&enable_rescue_mode_for_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<EnableRescueModeForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn get_action_for_server(&self, params: GetActionForServerParams) -> Result<crate::models::GetActionForServerResponse, Error<GetActionForServerError>> {
        // unbox the parameters
        let id = params.id;
        let action_id = params.action_id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/{action_id}", configuration.base_path, id=crate::apis::urlencode(id), action_id=crate::apis::urlencode(action_id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<GetActionForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn get_metrics_for_server(&self, params: GetMetricsForServerParams) -> Result<crate::models::GetMetricsForServerResponse, Error<GetMetricsForServerError>> {
        // unbox the parameters
        let id = params.id;
        let _type = params._type;
        let start = params.start;
        let end = params.end;
        let step = params.step;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/metrics", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("type", &_type.to_string())]);
        req_builder = req_builder.query(&[("start", &start.to_string())]);
        req_builder = req_builder.query(&[("end", &end.to_string())]);
        if let Some(ref s) = step {
            req_builder = req_builder.query(&[("step", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<GetMetricsForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn get_server(&self, params: GetServerParams) -> Result<crate::models::GetServerResponse, Error<GetServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<GetServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn list_actions_for_server(&self, params: ListActionsForServerParams) -> Result<crate::models::ListActionsForServerResponse, Error<ListActionsForServerError>> {
        // unbox the parameters
        let id = params.id;
        let status = params.status;
        let sort = params.sort;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListActionsForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn list_servers(&self, params: ListServersParams) -> Result<crate::models::ListServersResponse, Error<ListServersError>> {
        // unbox the parameters
        let status = params.status;
        let sort = params.sort;
        let name = params.name;
        let label_selector = params.label_selector;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = status {
            req_builder = req_builder.query(&[("status", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref s) = name {
            req_builder = req_builder.query(&[("name", &s.to_string())]);
        }
        if let Some(ref s) = label_selector {
            req_builder = req_builder.query(&[("label_selector", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ListServersError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn power_off_server(&self, params: PowerOffServerParams) -> Result<crate::models::PowerOffServerResponse, Error<PowerOffServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/poweroff", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PowerOffServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn power_on_server(&self, params: PowerOnServerParams) -> Result<crate::models::PowerOnServerResponse, Error<PowerOnServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/poweron", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<PowerOnServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn rebuild_server_from_image(&self, params: RebuildServerFromImageParams) -> Result<crate::models::RebuildServerFromImageResponse, Error<RebuildServerFromImageError>> {
        // unbox the parameters
        let id = params.id;
        let rebuild_server_from_image_request = params.rebuild_server_from_image_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/rebuild", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&rebuild_server_from_image_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RebuildServerFromImageError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn replace_server(&self, params: ReplaceServerParams) -> Result<crate::models::ReplaceServerResponse, Error<ReplaceServerError>> {
        // unbox the parameters
        let id = params.id;
        let replace_server_request = params.replace_server_request;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        req_builder = req_builder.json(&replace_server_request);

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ReplaceServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn request_console_for_server(&self, params: RequestConsoleForServerParams) -> Result<crate::models::RequestConsoleForServerResponse, Error<RequestConsoleForServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/request_console", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<RequestConsoleForServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn reset_root_password_of_server(&self, params: ResetRootPasswordOfServerParams) -> Result<crate::models::ResetRootPasswordOfServerResponse, Error<ResetRootPasswordOfServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reset_password", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ResetRootPasswordOfServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn reset_server(&self, params: ResetServerParams) -> Result<crate::models::ResetServerResponse, Error<ResetServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reset", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ResetServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn shutdown_server(&self, params: ShutdownServerParams) -> Result<crate::models::ShutdownServerResponse, Error<ShutdownServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/shutdown", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<ShutdownServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

    fn soft_reboot_server(&self, params: SoftRebootServerParams) -> Result<crate::models::SoftRebootServerResponse, Error<SoftRebootServerError>> {
        // unbox the parameters
        let id = params.id;

        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/servers/{id}/actions/reboot", configuration.base_path, id=crate::apis::urlencode(id));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };

        let req = req_builder.build()?;
        let mut resp = client.execute(req)?;

        let status = resp.status();
        let content = resp.text()?;

        if status.is_success() {
            serde_json::from_str(&content).map_err(Error::from)
        } else {
            let entity: Option<SoftRebootServerError> = serde_json::from_str(&content).ok();
            let error = ResponseContent { status, content, entity };
            Err(Error::ResponseError(error))
        }
    }

}
