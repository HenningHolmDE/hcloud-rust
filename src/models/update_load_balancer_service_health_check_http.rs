/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.24.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UpdateLoadBalancerServiceHealthCheckHttp : Additional configuration for protocol http.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateLoadBalancerServiceHealthCheckHttp {
    /// Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
    #[serde(
        rename = "domain",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub domain: Option<Option<String>>,
    /// HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// String that must be contained in HTTP response in order to pass the health check.
    #[serde(rename = "response", skip_serializing_if = "Option::is_none")]
    pub response: Option<String>,
    /// List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
    #[serde(rename = "status_codes", skip_serializing_if = "Option::is_none")]
    pub status_codes: Option<Vec<String>>,
    /// Use HTTPS for health check.
    #[serde(rename = "tls", skip_serializing_if = "Option::is_none")]
    pub tls: Option<bool>,
}

impl UpdateLoadBalancerServiceHealthCheckHttp {
    /// Additional configuration for protocol http.
    pub fn new() -> UpdateLoadBalancerServiceHealthCheckHttp {
        UpdateLoadBalancerServiceHealthCheckHttp {
            domain: None,
            path: None,
            response: None,
            status_codes: None,
            tls: None,
        }
    }
}
