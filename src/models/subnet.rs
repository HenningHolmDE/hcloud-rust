/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Subnet : Subnets divide the ip_range from the parent Network object into multiple Subnetworks that you can use for different specific purposes.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Subnet {
    /// Type of Subnetwork
    #[serde(rename = "type")]
    pub _type: Type,
    /// Range to allocate IPs from. Must be a Subnet of the ip_range of the parent network object and must not overlap with any other subnets or with any destinations in routes. Minimum Network size is /30. We suggest that you pick a bigger Network with a /24 netmask.
    #[serde(rename = "ip_range", skip_serializing_if = "Option::is_none")]
    pub ip_range: Option<String>,
    /// Name of Network zone. Currently eu-central is the only available zone.
    #[serde(rename = "network_zone")]
    pub network_zone: String,
}

impl Subnet {
    /// Subnets divide the ip_range from the parent Network object into multiple Subnetworks that you can use for different specific purposes.
    pub fn new(_type: Type, network_zone: String) -> Subnet {
        Subnet {
            _type,
            ip_range: None,
            network_zone,
        }
    }
}

/// Type of Subnetwork
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "cloud")]
    Cloud,
    #[serde(rename = "server")]
    Server,
}

