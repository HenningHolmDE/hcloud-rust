/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.21.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ListPricesResponsePricing {
    /// Currency the returned prices are expressed in, coded according to ISO 4217
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "floating_ip")]
    pub floating_ip: Box<models::ListPricesResponsePricingFloatingIp>,
    /// Costs of Floating IPs types per Location and type
    #[serde(rename = "floating_ips")]
    pub floating_ips: Vec<models::ListPricesResponsePricingFloatingIps>,
    #[serde(rename = "image")]
    pub image: Box<models::ListPricesResponsePricingImage>,
    /// Costs of Load Balancer types per Location and type
    #[serde(rename = "load_balancer_types")]
    pub load_balancer_types: Vec<models::ListPricesResponsePricingLoadBalancerTypes>,
    /// Costs of Primary IPs types per Location
    #[serde(rename = "primary_ips")]
    pub primary_ips: Vec<models::ListPricesResponsePricingPrimaryIps>,
    #[serde(rename = "server_backup")]
    pub server_backup: Box<models::ListPricesResponsePricingServerBackup>,
    /// Costs of Server types per Location and type
    #[serde(rename = "server_types")]
    pub server_types: Vec<models::ListPricesResponsePricingServerTypes>,
    /// **Deprecated**: This field is deprecated and set to `null` since 5 August 2024. Please refer to the `price_per_tb_traffic` fields in `server_types` and `load_balancer_types` instead.  Learn more about this change in [the Changelog](https://docs.hetzner.cloud/changelog#2024-07-25-cloud-api-returns-traffic-information-in-different-format).
    #[serde(rename = "traffic", deserialize_with = "Option::deserialize")]
    pub traffic: Option<serde_json::Value>,
    /// The VAT rate used for calculating prices with VAT
    #[serde(rename = "vat_rate")]
    pub vat_rate: String,
    #[serde(rename = "volume")]
    pub volume: Box<models::ListPricesResponsePricingVolume>,
}

impl ListPricesResponsePricing {
    pub fn new(
        currency: String,
        floating_ip: models::ListPricesResponsePricingFloatingIp,
        floating_ips: Vec<models::ListPricesResponsePricingFloatingIps>,
        image: models::ListPricesResponsePricingImage,
        load_balancer_types: Vec<models::ListPricesResponsePricingLoadBalancerTypes>,
        primary_ips: Vec<models::ListPricesResponsePricingPrimaryIps>,
        server_backup: models::ListPricesResponsePricingServerBackup,
        server_types: Vec<models::ListPricesResponsePricingServerTypes>,
        traffic: Option<serde_json::Value>,
        vat_rate: String,
        volume: models::ListPricesResponsePricingVolume,
    ) -> ListPricesResponsePricing {
        ListPricesResponsePricing {
            currency,
            floating_ip: Box::new(floating_ip),
            floating_ips,
            image: Box::new(image),
            load_balancer_types,
            primary_ips,
            server_backup: Box::new(server_backup),
            server_types,
            traffic,
            vat_rate,
            volume: Box::new(volume),
        }
    }
}
