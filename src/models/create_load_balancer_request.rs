/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.3.0
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CreateLoadBalancerRequest : Request for POST https://api.hetzner.cloud/v1/load_balancers



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateLoadBalancerRequest {
    /// Name of the Load Balancer
    #[serde(rename = "name")]
    pub name: String,
    /// ID or name of the Load Balancer type this Load Balancer should be created with
    #[serde(rename = "load_balancer_type")]
    pub load_balancer_type: String,
    #[serde(rename = "algorithm")]
    pub algorithm: Box<crate::models::LoadBalancerAlgorithm>,
    /// Array of services
    #[serde(rename = "services", skip_serializing_if = "Option::is_none")]
    pub services: Option<Vec<crate::models::Service>>,
    /// Array of targets
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<Vec<crate::models::Target>>,
    /// User-defined labels (key-value pairs)
    #[serde(rename = "labels", skip_serializing_if = "Option::is_none")]
    pub labels: Option<::std::collections::HashMap<String, String>>,
    /// Enable or disable the public interface of the Load Balancer
    #[serde(rename = "public_interface", skip_serializing_if = "Option::is_none")]
    pub public_interface: Option<bool>,
    /// ID of the network the Load Balancer should be attached to on creation
    #[serde(rename = "network", skip_serializing_if = "Option::is_none")]
    pub network: Option<i32>,
    /// Name of network zone
    #[serde(rename = "network_zone", skip_serializing_if = "Option::is_none")]
    pub network_zone: Option<String>,
    /// ID or name of Location to create Load Balancer in
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<String>,
}

impl CreateLoadBalancerRequest {
    /// Request for POST https://api.hetzner.cloud/v1/load_balancers
    pub fn new(name: String, load_balancer_type: String, algorithm: crate::models::LoadBalancerAlgorithm) -> CreateLoadBalancerRequest {
        CreateLoadBalancerRequest {
            name,
            load_balancer_type,
            algorithm: Box::new(algorithm),
            services: None,
            targets: None,
            labels: None,
            public_interface: None,
            network: None,
            network_zone: None,
            location: None,
        }
    }
}


