/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateVolumeResponseNextActions {
    /// ID of the Action
    #[serde(rename = "id")]
    pub id: i32,
    /// Command executed in the Action
    #[serde(rename = "command")]
    pub command: String,
    /// Status of the Action
    #[serde(rename = "status")]
    pub status: Status,
    /// Progress of Action in percent
    #[serde(rename = "progress")]
    pub progress: f32,
    /// Point in time when the Action was started (in ISO-8601 format)
    #[serde(rename = "started")]
    pub started: String,
    /// Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
    #[serde(rename = "finished")]
    pub finished: Option<String>,
    /// Resources the Action relates to
    #[serde(rename = "resources")]
    pub resources: Vec<crate::models::Resource>,
    #[serde(rename = "error")]
    pub error: Option<crate::models::Error>,
}

impl CreateVolumeResponseNextActions {
    pub fn new(id: i32, command: String, status: Status, progress: f32, started: String, finished: Option<String>, resources: Vec<crate::models::Resource>, error: Option<crate::models::Error>) -> CreateVolumeResponseNextActions {
        CreateVolumeResponseNextActions {
            id,
            command,
            status,
            progress,
            started,
            finished,
            resources,
            error,
        }
    }
}

/// Status of the Action
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "error")]
    Error,
    #[serde(rename = "running")]
    Running,
    #[serde(rename = "success")]
    Success,
}

