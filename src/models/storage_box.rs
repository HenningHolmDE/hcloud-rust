/*
 * Hetzner Cloud API
 *
 * Copied from the official API documentation for the Public Hetzner Cloud.
 *
 * The version of the OpenAPI document: 0.26.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StorageBox {
    #[serde(rename = "access_settings")]
    pub access_settings: Box<models::StorageBoxAccessSetting>,
    /// Point in time (in ISO-8601 format).
    #[serde(rename = "created")]
    pub created: String,
    /// ID of the Storage Box.
    #[serde(rename = "id")]
    pub id: i64,
    /// User-defined labels (`key/value` pairs) for the Resource. For more information, see \"[Labels](#labels)\".  | User-defined labels (`key/value` pairs) for the Resource.  Note that the set of [Labels](#labels) provided in the request will overwrite the existing one.  For more information, see \"[Labels](#labels)\".  | The Storage Boxes' labels. | The Subaccounts' labels. | The Snapshots' labels.
    #[serde(rename = "labels")]
    pub labels: std::collections::HashMap<String, String>,
    #[serde(rename = "location")]
    pub location: Box<models::Location>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "protection")]
    pub protection: Box<models::Protection>,
    /// FQDN of the Storage Box. Not available if the status is \"initializing\".
    #[serde(rename = "server", deserialize_with = "Option::deserialize")]
    pub server: Option<String>,
    #[serde(rename = "snapshot_plan", deserialize_with = "Option::deserialize")]
    pub snapshot_plan: Option<Box<models::SnapshotPlan>>,
    #[serde(rename = "stats", deserialize_with = "Option::deserialize")]
    pub stats: Option<Box<models::StorageBoxStats>>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "storage_box_type")]
    pub storage_box_type: Box<models::StorageBoxType>,
    /// Storage Box host system. Not available if the status is \"initializing\".
    #[serde(rename = "system", deserialize_with = "Option::deserialize")]
    pub system: Option<String>,
    /// Primary username of the Storage Box.  Not available if the status is \"initializing\".
    #[serde(
        rename = "username",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub username: Option<Option<String>>,
}

impl StorageBox {
    pub fn new(
        access_settings: models::StorageBoxAccessSetting,
        created: String,
        id: i64,
        labels: std::collections::HashMap<String, String>,
        location: models::Location,
        name: String,
        protection: models::Protection,
        server: Option<String>,
        snapshot_plan: Option<models::SnapshotPlan>,
        stats: Option<models::StorageBoxStats>,
        status: Status,
        storage_box_type: models::StorageBoxType,
        system: Option<String>,
    ) -> StorageBox {
        StorageBox {
            access_settings: Box::new(access_settings),
            created,
            id,
            labels,
            location: Box::new(location),
            name,
            protection: Box::new(protection),
            server,
            snapshot_plan: snapshot_plan.map(Box::new),
            stats: stats.map(Box::new),
            status,
            storage_box_type: Box::new(storage_box_type),
            system,
            username: None,
        }
    }
}
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "initializing")]
    Initializing,
    #[serde(rename = "locked")]
    Locked,
}

impl Default for Status {
    fn default() -> Status {
        Self::Active
    }
}
